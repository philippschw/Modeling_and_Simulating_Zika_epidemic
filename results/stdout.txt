[TerminalIPythonApp] WARNING | Subcommand `ipython nbconvert` is deprecated and will be removed in future versions.
[TerminalIPythonApp] WARNING | You likely want to use `jupyter nbconvert` in the future
[NbConvertApp] Copying /home/ubuntu/.ipython/kernels -> /home/ubuntu/.local/share/jupyter/kernels
[NbConvertApp] Copying /home/ubuntu/.ipython/profile_default/static/custom/custom.js -> /home/ubuntu/.jupyter/custom/custom.js
[NbConvertApp] Converting notebook Run 2 regions.ipynb to notebook
[NbConvertApp] Executing notebook with kernel: python2
[NbConvertApp] ERROR | Error while converting 'Run 2 regions.ipynb'
Traceback (most recent call last):
  File "/usr/local/lib/python2.7/dist-packages/nbconvert/nbconvertapp.py", line 357, in export_single_notebook
    output, resources = self.exporter.from_filename(notebook_filename, resources=resources)
  File "/usr/local/lib/python2.7/dist-packages/nbconvert/exporters/exporter.py", line 165, in from_filename
    return self.from_file(f, resources=resources, **kw)
  File "/usr/local/lib/python2.7/dist-packages/nbconvert/exporters/exporter.py", line 183, in from_file
    return self.from_notebook_node(nbformat.read(file_stream, as_version=4), resources=resources, **kw)
  File "/usr/local/lib/python2.7/dist-packages/nbconvert/exporters/notebook.py", line 26, in from_notebook_node
    nb_copy, resources = super(NotebookExporter, self).from_notebook_node(nb, resources, **kw)
  File "/usr/local/lib/python2.7/dist-packages/nbconvert/exporters/exporter.py", line 130, in from_notebook_node
    nb_copy, resources = self._preprocess(nb_copy, resources)
  File "/usr/local/lib/python2.7/dist-packages/nbconvert/exporters/exporter.py", line 302, in _preprocess
    nbc, resc = preprocessor(nbc, resc)
  File "/usr/local/lib/python2.7/dist-packages/nbconvert/preprocessors/base.py", line 47, in __call__
    return self.preprocess(nb,resources)
  File "/usr/local/lib/python2.7/dist-packages/nbconvert/preprocessors/execute.py", line 145, in preprocess
    nb, resources = super(ExecutePreprocessor, self).preprocess(nb, resources)
  File "/usr/local/lib/python2.7/dist-packages/nbconvert/preprocessors/base.py", line 70, in preprocess
    nb.cells[index], resources = self.preprocess_cell(cell, resources, index)
  File "/usr/local/lib/python2.7/dist-packages/nbconvert/preprocessors/execute.py", line 176, in preprocess_cell
    raise CellExecutionError(msg)
CellExecutionError: An error occurred while executing the following cell:
------------------
#============================================================================================
#    Load required Modules
#============================================================================================
from __future__ import (absolute_import, print_function, division,
                        unicode_literals)
# Append to sys path to ensure that own modules are found
import sys
sys.path
sys.path.append(r'/src')
sys.path.append(r'C:/Users/Schwarz/Dropbox/Workspace_Zika_Models_Philipp/src')
sys.path.append(r'/home/philipp/Dropbox/Workspace_Zika_Models_Philipp/src')
del sys

# Load EMA Workbench to run model
from ema_workbench.util import ema_logging, save_results
from ema_workbench.em_framework import (ModelEnsemble, ModelStructureInterface,
                                        ParameterUncertainty,
                                        CategoricalUncertainty,
                                        Outcome)

# Load Runner for multi_regional models
from multi_model import control
from multi_model.control import  Multi_models, Flight_Matrix

# Load Function that generates list that maps the simulation timestep to month
import util.MonthlyDataExtractor as MonthlyDataExtractor

# Load Python Modules for handling data
from itertools import cycle
import numpy as np
import pandas as pd
import geopandas as gp
#============================================================================================
#    Set up monthyly
#============================================================================================
Simulation_time = 69
control.Simulation_time = Simulation_time

Month_before_startup = 6 # June
lst_sim_time_month = MonthlyDataExtractor.set_up(Simulation_time, Month_before_startup)
#============================================================================================
#    Load simulation input data
#============================================================================================
model_elements = gp.read_file('preprocessing_results/geojson/gdf_model_elements.geojson')
model_elements['i'] = model_elements.index
model_elements = model_elements.set_index('index')
model_elements['perc_pover'] = model_elements['perc_pover']/100
me = len(model_elements)

Region_initially_infected = 92 # Region 92 (Recife is initially infected)
e = model_elements.ix[Region_initially_infected]['i'] # Lookup index position
outc = pd.read_csv(r'input_data_simulation/csv_files/Series_model_outcomes.csv') 
control.Region_initially_infected=Region_initially_infected

#### SWITCH 2 REGIONS OR ALL

region2=94 # The other Region
a = model_elements.ix[region2]['i'] # Lookup index position
outc = outc.ix[[a, me+a, me*2+a, me*3+a, me*4+a, 0+e, me+e, me*2+e, me*3+e, me*4+e]]
model_elements = model_elements.ix[[region2, Region_initially_infected]]
#### SWITCH 2 REGIONS OR ALL

control.dic=model_elements.to_dict()

mulitindex_df_Travel_monthly = pd.read_csv(r'input_data_simulation/csv_files/monthly_FlightData.csv', index_col=[0, 1])
mulitindex_df_Travel_monthly.rename(columns = int, inplace = True)
mulitindex_df_Travel_monthly.index.names = [None, None]
mulitindex_df_Travel_monthly.fillna(0, inplace=True)

df_vector = pd.read_csv('input_data_simulation/csv_files/Env_suitability_monthly.csv',
                                          index_col=[0, 1]) # Account for multindex 
df_vector.index.names = [None, None] # Delete index names created from reading/saving to csv
df_vector.rename(columns={k:int(k) for k in df_vector.columns.tolist()},
                                   inplace=True)# Convert column names from string to integer
control.dic_vector = df_vector.to_dict()



------------------

ImportError: No module named ema_workbench.util

Failed with exit code: 1
